// Code generated by mockery v2.35.4. DO NOT EDIT.

package mocks

import (
	context "context"

	model "github.com/Alphonnse/filmLibriary/internal/model"
	mock "github.com/stretchr/testify/mock"

	uuid "github.com/google/uuid"
)

// ServiceLibriaryShape is an autogenerated mock type for the ServiceLibriaryShape type
type ServiceLibriaryShape struct {
	mock.Mock
}

// AddActorInfo provides a mock function with given fields: _a0, _a1
func (_m *ServiceLibriaryShape) AddActorInfo(_a0 context.Context, _a1 *model.ActorModel) (*model.ActorModel, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *model.ActorModel
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *model.ActorModel) (*model.ActorModel, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *model.ActorModel) *model.ActorModel); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.ActorModel)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *model.ActorModel) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// AddFilmInfo provides a mock function with given fields: _a0, _a1
func (_m *ServiceLibriaryShape) AddFilmInfo(_a0 context.Context, _a1 *model.FilmModel) (*model.FilmModelResponse, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *model.FilmModelResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *model.FilmModel) (*model.FilmModelResponse, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *model.FilmModel) *model.FilmModelResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.FilmModelResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *model.FilmModel) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ChangeActorInfo provides a mock function with given fields: _a0, _a1
func (_m *ServiceLibriaryShape) ChangeActorInfo(_a0 context.Context, _a1 *model.ActorModel) (*model.ActorModel, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *model.ActorModel
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *model.ActorModel) (*model.ActorModel, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *model.ActorModel) *model.ActorModel); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.ActorModel)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *model.ActorModel) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ChangeFilmInfo provides a mock function with given fields: _a0, _a1
func (_m *ServiceLibriaryShape) ChangeFilmInfo(_a0 context.Context, _a1 *model.FilmModelResponse) (*model.FilmModelResponse, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *model.FilmModelResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *model.FilmModelResponse) (*model.FilmModelResponse, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *model.FilmModelResponse) *model.FilmModelResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.FilmModelResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *model.FilmModelResponse) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetActorsListWithFilms provides a mock function with given fields: _a0
func (_m *ServiceLibriaryShape) GetActorsListWithFilms(_a0 context.Context) (*model.GetActorsAndTeirFilmsService, error) {
	ret := _m.Called(_a0)

	var r0 *model.GetActorsAndTeirFilmsService
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) (*model.GetActorsAndTeirFilmsService, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(context.Context) *model.GetActorsAndTeirFilmsService); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.GetActorsAndTeirFilmsService)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetFilmsList provides a mock function with given fields: _a0, _a1
func (_m *ServiceLibriaryShape) GetFilmsList(_a0 context.Context, _a1 *model.GetFilmsListService) ([]model.FilmsListModel, error) {
	ret := _m.Called(_a0, _a1)

	var r0 []model.FilmsListModel
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *model.GetFilmsListService) ([]model.FilmsListModel, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *model.GetFilmsListService) []model.FilmsListModel); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]model.FilmsListModel)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *model.GetFilmsListService) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetFilmsListByFragment provides a mock function with given fields: _a0, _a1
func (_m *ServiceLibriaryShape) GetFilmsListByFragment(_a0 context.Context, _a1 *model.GetFilmsListByFragmentService) ([]model.FilmsListModel, error) {
	ret := _m.Called(_a0, _a1)

	var r0 []model.FilmsListModel
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *model.GetFilmsListByFragmentService) ([]model.FilmsListModel, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *model.GetFilmsListByFragmentService) []model.FilmsListModel); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]model.FilmsListModel)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *model.GetFilmsListByFragmentService) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RmActorInfo provides a mock function with given fields: _a0, _a1
func (_m *ServiceLibriaryShape) RmActorInfo(_a0 context.Context, _a1 uuid.UUID) error {
	ret := _m.Called(_a0, _a1)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) error); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// RmFilmInfo provides a mock function with given fields: _a0, _a1
func (_m *ServiceLibriaryShape) RmFilmInfo(_a0 context.Context, _a1 uuid.UUID) error {
	ret := _m.Called(_a0, _a1)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) error); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewServiceLibriaryShape creates a new instance of ServiceLibriaryShape. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewServiceLibriaryShape(t interface {
	mock.TestingT
	Cleanup(func())
}) *ServiceLibriaryShape {
	mock := &ServiceLibriaryShape{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
