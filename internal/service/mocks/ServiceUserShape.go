// Code generated by mockery v2.35.4. DO NOT EDIT.

package mocks

import (
	context "context"

	model "github.com/Alphonnse/filmLibriary/internal/model"
	mock "github.com/stretchr/testify/mock"

	uuid "github.com/google/uuid"
)

// ServiceUserShape is an autogenerated mock type for the ServiceUserShape type
type ServiceUserShape struct {
	mock.Mock
}

// AddUser provides a mock function with given fields: _a0, _a1, _a2
func (_m *ServiceUserShape) AddUser(_a0 context.Context, _a1 *model.UserModel, _a2 bool) (*model.UserRequestModel, error) {
	ret := _m.Called(_a0, _a1, _a2)

	var r0 *model.UserRequestModel
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *model.UserModel, bool) (*model.UserRequestModel, error)); ok {
		return rf(_a0, _a1, _a2)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *model.UserModel, bool) *model.UserRequestModel); ok {
		r0 = rf(_a0, _a1, _a2)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.UserRequestModel)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *model.UserModel, bool) error); ok {
		r1 = rf(_a0, _a1, _a2)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetUser provides a mock function with given fields: _a0, _a1
func (_m *ServiceUserShape) GetUser(_a0 context.Context, _a1 *model.UserModel) (*model.UserRequestModel, string, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *model.UserRequestModel
	var r1 string
	var r2 error
	if rf, ok := ret.Get(0).(func(context.Context, *model.UserModel) (*model.UserRequestModel, string, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *model.UserModel) *model.UserRequestModel); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.UserRequestModel)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *model.UserModel) string); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Get(1).(string)
	}

	if rf, ok := ret.Get(2).(func(context.Context, *model.UserModel) error); ok {
		r2 = rf(_a0, _a1)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// GetUserByID provides a mock function with given fields: _a0, _a1
func (_m *ServiceUserShape) GetUserByID(_a0 context.Context, _a1 uuid.UUID) (*model.UserModel, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *model.UserModel
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) (*model.UserModel, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) *model.UserModel); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.UserModel)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewServiceUserShape creates a new instance of ServiceUserShape. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewServiceUserShape(t interface {
	mock.TestingT
	Cleanup(func())
}) *ServiceUserShape {
	mock := &ServiceUserShape{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
