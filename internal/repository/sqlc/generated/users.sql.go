// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.20.0
// source: users.sql

package generated

import (
	"context"
	"time"

	"github.com/google/uuid"
)

const addUser = `-- name: AddUser :one
INSERT INTO users (id, role_id, name, password, created_at, updated_at)
VALUES($1,$2,$3,$4,$5,$6)
RETURNING id, role_id, name, password, created_at, updated_at
`

type AddUserParams struct {
	ID        uuid.UUID
	RoleID    int32
	Name      string
	Password  string
	CreatedAt time.Time
	UpdatedAt time.Time
}

func (q *Queries) AddUser(ctx context.Context, arg AddUserParams) (User, error) {
	row := q.db.QueryRowContext(ctx, addUser,
		arg.ID,
		arg.RoleID,
		arg.Name,
		arg.Password,
		arg.CreatedAt,
		arg.UpdatedAt,
	)
	var i User
	err := row.Scan(
		&i.ID,
		&i.RoleID,
		&i.Name,
		&i.Password,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getUserByID = `-- name: GetUserByID :one
SELECT id, role_id, name, password, created_at, updated_at FROM users WHERE id = $1
`

func (q *Queries) GetUserByID(ctx context.Context, id uuid.UUID) (User, error) {
	row := q.db.QueryRowContext(ctx, getUserByID, id)
	var i User
	err := row.Scan(
		&i.ID,
		&i.RoleID,
		&i.Name,
		&i.Password,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
