// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.20.0
// source: films.sql

package generated

import (
	"context"
	"database/sql"
	"time"

	"github.com/google/uuid"
)

const addFilmInfo = `-- name: AddFilmInfo :one
INSERT INTO films (id, title, description, releaseDate, rate, created_at, updated_at)
VALUES($1,$2,$3,$4,$5,$6,$7)
RETURNING id, title, description, releasedate, rate, created_at, updated_at
`

type AddFilmInfoParams struct {
	ID          uuid.UUID
	Title       string
	Description sql.NullString
	Releasedate sql.NullTime
	Rate        sql.NullInt32
	CreatedAt   time.Time
	UpdatedAt   time.Time
}

func (q *Queries) AddFilmInfo(ctx context.Context, arg AddFilmInfoParams) (Film, error) {
	row := q.db.QueryRowContext(ctx, addFilmInfo,
		arg.ID,
		arg.Title,
		arg.Description,
		arg.Releasedate,
		arg.Rate,
		arg.CreatedAt,
		arg.UpdatedAt,
	)
	var i Film
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.Description,
		&i.Releasedate,
		&i.Rate,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const changeFilmInfo = `-- name: ChangeFilmInfo :one
UPDATE films 
SET title = $2,
	description = $3,
	releaseDate = $4,
	rate = $5,
	updated_at = $6
WHERE id = $1
RETURNING id, title, description, releasedate, rate, created_at, updated_at
`

type ChangeFilmInfoParams struct {
	ID          uuid.UUID
	Title       string
	Description sql.NullString
	Releasedate sql.NullTime
	Rate        sql.NullInt32
	UpdatedAt   time.Time
}

func (q *Queries) ChangeFilmInfo(ctx context.Context, arg ChangeFilmInfoParams) (Film, error) {
	row := q.db.QueryRowContext(ctx, changeFilmInfo,
		arg.ID,
		arg.Title,
		arg.Description,
		arg.Releasedate,
		arg.Rate,
		arg.UpdatedAt,
	)
	var i Film
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.Description,
		&i.Releasedate,
		&i.Rate,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getActorsByFilmId = `-- name: GetActorsByFilmId :many
SELECT film_id, actor_id FROM actors_films WHERE film_id = $1
`

func (q *Queries) GetActorsByFilmId(ctx context.Context, filmID uuid.UUID) ([]ActorsFilm, error) {
	rows, err := q.db.QueryContext(ctx, getActorsByFilmId, filmID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ActorsFilm
	for rows.Next() {
		var i ActorsFilm
		if err := rows.Scan(&i.FilmID, &i.ActorID); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getFilmByID = `-- name: GetFilmByID :one
SELECT id, title, description, releasedate, rate, created_at, updated_at FROM films WHERE id = $1
`

func (q *Queries) GetFilmByID(ctx context.Context, id uuid.UUID) (Film, error) {
	row := q.db.QueryRowContext(ctx, getFilmByID, id)
	var i Film
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.Description,
		&i.Releasedate,
		&i.Rate,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getFilmsByActorNameFragment = `-- name: GetFilmsByActorNameFragment :many
SELECT DISTINCT f.id, f.title, f.description, f.releasedate, f.rate, f.created_at, f.updated_at
FROM films f
JOIN actors_films af ON f.id = af.film_id
JOIN actors a ON af.actor_id = a.id
WHERE a.name LIKE $1
`

func (q *Queries) GetFilmsByActorNameFragment(ctx context.Context, name string) ([]Film, error) {
	rows, err := q.db.QueryContext(ctx, getFilmsByActorNameFragment, name)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Film
	for rows.Next() {
		var i Film
		if err := rows.Scan(
			&i.ID,
			&i.Title,
			&i.Description,
			&i.Releasedate,
			&i.Rate,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getFilmsSortedByOrderedByRateAsc = `-- name: GetFilmsSortedByOrderedByRateAsc :many
SELECT id, title, description, releasedate, rate, created_at, updated_at FROM films ORDER BY rate ASC
`

func (q *Queries) GetFilmsSortedByOrderedByRateAsc(ctx context.Context) ([]Film, error) {
	rows, err := q.db.QueryContext(ctx, getFilmsSortedByOrderedByRateAsc)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Film
	for rows.Next() {
		var i Film
		if err := rows.Scan(
			&i.ID,
			&i.Title,
			&i.Description,
			&i.Releasedate,
			&i.Rate,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getFilmsSortedByOrderedByRateDesc = `-- name: GetFilmsSortedByOrderedByRateDesc :many
SELECT id, title, description, releasedate, rate, created_at, updated_at FROM films ORDER BY rate DESC
`

func (q *Queries) GetFilmsSortedByOrderedByRateDesc(ctx context.Context) ([]Film, error) {
	rows, err := q.db.QueryContext(ctx, getFilmsSortedByOrderedByRateDesc)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Film
	for rows.Next() {
		var i Film
		if err := rows.Scan(
			&i.ID,
			&i.Title,
			&i.Description,
			&i.Releasedate,
			&i.Rate,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getFilmsSortedByOrderedByReleaseDateAsc = `-- name: GetFilmsSortedByOrderedByReleaseDateAsc :many
SELECT id, title, description, releasedate, rate, created_at, updated_at FROM films ORDER BY releaseDate ASC
`

func (q *Queries) GetFilmsSortedByOrderedByReleaseDateAsc(ctx context.Context) ([]Film, error) {
	rows, err := q.db.QueryContext(ctx, getFilmsSortedByOrderedByReleaseDateAsc)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Film
	for rows.Next() {
		var i Film
		if err := rows.Scan(
			&i.ID,
			&i.Title,
			&i.Description,
			&i.Releasedate,
			&i.Rate,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getFilmsSortedByOrderedByReleaseDateDesc = `-- name: GetFilmsSortedByOrderedByReleaseDateDesc :many
SELECT id, title, description, releasedate, rate, created_at, updated_at FROM films ORDER BY releaseDate DESC
`

func (q *Queries) GetFilmsSortedByOrderedByReleaseDateDesc(ctx context.Context) ([]Film, error) {
	rows, err := q.db.QueryContext(ctx, getFilmsSortedByOrderedByReleaseDateDesc)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Film
	for rows.Next() {
		var i Film
		if err := rows.Scan(
			&i.ID,
			&i.Title,
			&i.Description,
			&i.Releasedate,
			&i.Rate,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getFilmsSortedByOrderedByTitleAsc = `-- name: GetFilmsSortedByOrderedByTitleAsc :many
SELECT id, title, description, releasedate, rate, created_at, updated_at FROM films ORDER BY title ASC
`

func (q *Queries) GetFilmsSortedByOrderedByTitleAsc(ctx context.Context) ([]Film, error) {
	rows, err := q.db.QueryContext(ctx, getFilmsSortedByOrderedByTitleAsc)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Film
	for rows.Next() {
		var i Film
		if err := rows.Scan(
			&i.ID,
			&i.Title,
			&i.Description,
			&i.Releasedate,
			&i.Rate,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getFilmsSortedByOrderedByTitleDesc = `-- name: GetFilmsSortedByOrderedByTitleDesc :many
SELECT id, title, description, releasedate, rate, created_at, updated_at FROM films ORDER BY title DESC
`

func (q *Queries) GetFilmsSortedByOrderedByTitleDesc(ctx context.Context) ([]Film, error) {
	rows, err := q.db.QueryContext(ctx, getFilmsSortedByOrderedByTitleDesc)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Film
	for rows.Next() {
		var i Film
		if err := rows.Scan(
			&i.ID,
			&i.Title,
			&i.Description,
			&i.Releasedate,
			&i.Rate,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const insertIntoActorToFilme = `-- name: InsertIntoActorToFilme :exec
INSERT INTO actors_films (film_id, actor_id)
VALUES($1, $2)
`

type InsertIntoActorToFilmeParams struct {
	FilmID  uuid.UUID
	ActorID uuid.UUID
}

func (q *Queries) InsertIntoActorToFilme(ctx context.Context, arg InsertIntoActorToFilmeParams) error {
	_, err := q.db.ExecContext(ctx, insertIntoActorToFilme, arg.FilmID, arg.ActorID)
	return err
}

const rmFilmInfo = `-- name: RmFilmInfo :exec
DELETE FROM films WHERE id = $1
`

func (q *Queries) RmFilmInfo(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.ExecContext(ctx, rmFilmInfo, id)
	return err
}
