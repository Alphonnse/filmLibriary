// Code generated by mockery v2.35.4. DO NOT EDIT.

package mocks

import (
	context "context"

	generated "github.com/Alphonnse/filmLibriary/internal/repository/sqlc/generated"
	mock "github.com/stretchr/testify/mock"

	model "github.com/Alphonnse/filmLibriary/internal/model"

	uuid "github.com/google/uuid"
)

// Respository is an autogenerated mock type for the Respository type
type Respository struct {
	mock.Mock
}

// AddActorInfo provides a mock function with given fields: _a0, _a1
func (_m *Respository) AddActorInfo(_a0 context.Context, _a1 generated.AddActorInfoParams) (*model.ActorModel, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *model.ActorModel
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, generated.AddActorInfoParams) (*model.ActorModel, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, generated.AddActorInfoParams) *model.ActorModel); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.ActorModel)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, generated.AddActorInfoParams) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// AddFilmInfo provides a mock function with given fields: _a0, _a1
func (_m *Respository) AddFilmInfo(_a0 context.Context, _a1 generated.AddFilmInfoParams) (*model.FilmModelResponse, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *model.FilmModelResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, generated.AddFilmInfoParams) (*model.FilmModelResponse, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, generated.AddFilmInfoParams) *model.FilmModelResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.FilmModelResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, generated.AddFilmInfoParams) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// AddUser provides a mock function with given fields: _a0, _a1
func (_m *Respository) AddUser(_a0 context.Context, _a1 generated.AddUserParams) (*model.UserModel, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *model.UserModel
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, generated.AddUserParams) (*model.UserModel, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, generated.AddUserParams) *model.UserModel); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.UserModel)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, generated.AddUserParams) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ChangeActorInfo provides a mock function with given fields: _a0, _a1
func (_m *Respository) ChangeActorInfo(_a0 context.Context, _a1 generated.ChangeActorInfoParams) (*model.ActorModel, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *model.ActorModel
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, generated.ChangeActorInfoParams) (*model.ActorModel, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, generated.ChangeActorInfoParams) *model.ActorModel); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.ActorModel)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, generated.ChangeActorInfoParams) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ChangeFilmInfo provides a mock function with given fields: _a0, _a1
func (_m *Respository) ChangeFilmInfo(_a0 context.Context, _a1 generated.ChangeFilmInfoParams) (*model.FilmModelResponse, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *model.FilmModelResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, generated.ChangeFilmInfoParams) (*model.FilmModelResponse, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, generated.ChangeFilmInfoParams) *model.FilmModelResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.FilmModelResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, generated.ChangeFilmInfoParams) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetActorByID provides a mock function with given fields: _a0, _a1
func (_m *Respository) GetActorByID(_a0 context.Context, _a1 uuid.UUID) (*model.ActorModel, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *model.ActorModel
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) (*model.ActorModel, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) *model.ActorModel); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.ActorModel)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetActorsListWithFilms provides a mock function with given fields: _a0
func (_m *Respository) GetActorsListWithFilms(_a0 context.Context) (*model.GetActorsAndTeirFilmsService, error) {
	ret := _m.Called(_a0)

	var r0 *model.GetActorsAndTeirFilmsService
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) (*model.GetActorsAndTeirFilmsService, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(context.Context) *model.GetActorsAndTeirFilmsService); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.GetActorsAndTeirFilmsService)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetFilmByID provides a mock function with given fields: _a0, _a1
func (_m *Respository) GetFilmByID(_a0 context.Context, _a1 uuid.UUID) (*model.FilmModelResponse, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *model.FilmModelResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) (*model.FilmModelResponse, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) *model.FilmModelResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.FilmModelResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetFilmsByActorNameFragment provides a mock function with given fields: _a0, _a1
func (_m *Respository) GetFilmsByActorNameFragment(_a0 context.Context, _a1 string) ([]model.FilmsListModel, error) {
	ret := _m.Called(_a0, _a1)

	var r0 []model.FilmsListModel
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) ([]model.FilmsListModel, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) []model.FilmsListModel); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]model.FilmsListModel)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetFilmsListByTitleFragment provides a mock function with given fields: _a0, _a1
func (_m *Respository) GetFilmsListByTitleFragment(_a0 context.Context, _a1 string) ([]model.FilmsListModel, error) {
	ret := _m.Called(_a0, _a1)

	var r0 []model.FilmsListModel
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) ([]model.FilmsListModel, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) []model.FilmsListModel); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]model.FilmsListModel)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetFilmsSortedByOrderedByRateAsc provides a mock function with given fields: _a0
func (_m *Respository) GetFilmsSortedByOrderedByRateAsc(_a0 context.Context) ([]model.FilmsListModel, error) {
	ret := _m.Called(_a0)

	var r0 []model.FilmsListModel
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) ([]model.FilmsListModel, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(context.Context) []model.FilmsListModel); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]model.FilmsListModel)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetFilmsSortedByOrderedByRateDesc provides a mock function with given fields: _a0
func (_m *Respository) GetFilmsSortedByOrderedByRateDesc(_a0 context.Context) ([]model.FilmsListModel, error) {
	ret := _m.Called(_a0)

	var r0 []model.FilmsListModel
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) ([]model.FilmsListModel, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(context.Context) []model.FilmsListModel); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]model.FilmsListModel)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetFilmsSortedByOrderedByReleaseDateAsc provides a mock function with given fields: _a0
func (_m *Respository) GetFilmsSortedByOrderedByReleaseDateAsc(_a0 context.Context) ([]model.FilmsListModel, error) {
	ret := _m.Called(_a0)

	var r0 []model.FilmsListModel
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) ([]model.FilmsListModel, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(context.Context) []model.FilmsListModel); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]model.FilmsListModel)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetFilmsSortedByOrderedByReleaseDateDesc provides a mock function with given fields: _a0
func (_m *Respository) GetFilmsSortedByOrderedByReleaseDateDesc(_a0 context.Context) ([]model.FilmsListModel, error) {
	ret := _m.Called(_a0)

	var r0 []model.FilmsListModel
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) ([]model.FilmsListModel, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(context.Context) []model.FilmsListModel); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]model.FilmsListModel)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetFilmsSortedByOrderedByTitleAsc provides a mock function with given fields: _a0
func (_m *Respository) GetFilmsSortedByOrderedByTitleAsc(_a0 context.Context) ([]model.FilmsListModel, error) {
	ret := _m.Called(_a0)

	var r0 []model.FilmsListModel
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) ([]model.FilmsListModel, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(context.Context) []model.FilmsListModel); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]model.FilmsListModel)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetFilmsSortedByOrderedByTitleDesc provides a mock function with given fields: _a0
func (_m *Respository) GetFilmsSortedByOrderedByTitleDesc(_a0 context.Context) ([]model.FilmsListModel, error) {
	ret := _m.Called(_a0)

	var r0 []model.FilmsListModel
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) ([]model.FilmsListModel, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(context.Context) []model.FilmsListModel); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]model.FilmsListModel)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetUser provides a mock function with given fields: _a0, _a1
func (_m *Respository) GetUser(_a0 context.Context, _a1 string) (*model.UserModel, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *model.UserModel
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*model.UserModel, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *model.UserModel); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.UserModel)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetUserByID provides a mock function with given fields: _a0, _a1
func (_m *Respository) GetUserByID(_a0 context.Context, _a1 uuid.UUID) (*model.UserModel, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *model.UserModel
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) (*model.UserModel, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) *model.UserModel); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.UserModel)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// InsertIntoActorToFilme provides a mock function with given fields: _a0, _a1
func (_m *Respository) InsertIntoActorToFilme(_a0 context.Context, _a1 generated.InsertIntoActorToFilmeParams) error {
	ret := _m.Called(_a0, _a1)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, generated.InsertIntoActorToFilmeParams) error); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// RmActorInfo provides a mock function with given fields: _a0, _a1
func (_m *Respository) RmActorInfo(_a0 context.Context, _a1 uuid.UUID) error {
	ret := _m.Called(_a0, _a1)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) error); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// RmFilmInfo provides a mock function with given fields: _a0, _a1
func (_m *Respository) RmFilmInfo(_a0 context.Context, _a1 uuid.UUID) error {
	ret := _m.Called(_a0, _a1)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) error); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewRespository creates a new instance of Respository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewRespository(t interface {
	mock.TestingT
	Cleanup(func())
}) *Respository {
	mock := &Respository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
